token KW_TOKEN = "token";
token KW_ENTRY = "entry";
token KW_PROD = "prod";
token EQUALS = "=";
token SEMI = ";";
token LPAR = "(";
token RPAR = ")";
token QUESTION = "?";
token ASTERISK = "*";
token PLUS = "+";
token PIPE = "|";
token IDENT = /[a-zA-Z][a-zA-Z0-9_]*/;
token STRING = /".*"/;
token WHITESPACE = / \t\n/;

entry rule;
prod rule = entry_rule;
prod rule = prod_rule;
prod rule = token_rule;
prod entry_rule = KW_ENTRY IDENT;
prod prod_rule = KW_PROD IDENT EQUALS pattern;
prod token_rule = KW_TOKEN IDENT EQUALS STRING;
prod pattern = alternative;
prod alternative = concatenation PIPE concatenation;
prod alternative = concatenation;
prod concatenation = unary concatenation;
prod concatenation = unary;
prod unary = option;
prod unary = repetition_one;
prod unary = repetition_zero;
prod unary = item;
prod option = item QUESTION;
prod repetition_zero = item ASTERISK;
prod repetition_one = item PLUS;
prod item = IDENT;
prod item = LPAR pattern RPAR;